// 判断链表是否有环，若有，得到入环结点
// hashSet
// 快慢指针

// 1.链表均无环，无环链表若相交，则必定为Y的形状
// ①hashset实现
// 遍历其中一个链表，将结点信息存入set
// 之后遍历另一个链表，若第一次出现重复的结点，该结点必然为第一个共有结点
// 如果没有，返回空
// ②非hashset实现
// 先得到两个链表的尾结点，若两个结点的地址相同，则两个链表比相交
// 先得到两个链表的长度，之后，长链表从头走比短链表大于的部分
// 之后一起走，得到共有的第一个结点

// 2.均有环
// 分类，
// ①两个有环链表，不相交
// ②两个有环链表
// 有共享环，但是第一个相交的结点位于环外（两个链表的入环节点是同一个）
//  1->1->1  1<-1<-1
//         |
//         v
//         1
//         | 
//         v
//         1->1->1 
//         ^     |
//         |     v
//         1<-1<-1
// 链表1和2的入环结点一样，此时，将入环结点作为终止结点
// 问题退化为在以这个入环结点为尾结点的无环链表寻找最初的公共结点。返回13行
// ③有共享环，相交结点位于环内，且链表1与链表2的入换节点不一样
// 1->1->1   1->1->1
//       |         |
//       |         v
//       |         1
//       |         | 
//       |         v
//       |->1->1->1 
//          ^     |
//          |     v
//          1<-1<-1
// 若两个入环结点不一样，让一个入环结点转一圈，将圈中的结点信息存入set
// 若转完一圈set里含另一个如换节点
// 则这两个有环链表相交，入环结点为两个中的任意一个
// 若转完一圈set里含不另一个如换节点
// 则这两个有环链表不相交



// 3.一个有环，一个无环
// 不可能相交