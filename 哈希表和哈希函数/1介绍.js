/*
 * @Author: your name
 * @Date: 2021-04-01 17:12:13
 * @LastEditTime: 2021-04-02 11:05:36
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: \baseUp\哈希表和哈希函数\1哈希函数.js
 */

// 特征：
// 1.输入可以无限大，输出有限，会导致不同的输出有相同的输出==>哈希碰撞
// 2.同一个输入必得同样的输出
// 3.即使输入长的再像，经过哈希函数计算后，之间离散分布(均匀性)
// 4.哈希函数内部，将输入%一个数，得到的结果依然均匀分布
// 哈希表的常数时间较大，

// 做空间限制的题哈希表常用
// 例题：现有40亿个整数的文件（无符号）在硬盘中，每个整数4字节(32bit)
// 给1G内存空间（与外存区分），求数字出现频率最高的数字Top10
// 用哈希表实现
// 最差情况
// 每个数字均出现一次，此时哈希表存储了40亿条数据，每条记录8字节
// 若一次性全部读取，大概需要32G内存
//       |  | 
//        V 
// 1G/8bit≈1亿条

// 解决思路：将输出的结果取模100，根据哈希表的性质，得到的结果会均匀分布在0-99之间
// 结果为几放入记号文件，（共100个文件）
// 40亿/100 < 1亿，在最坏的情况下，每个文件的数字种类也不会超过1亿个（即将此文件放入内存，用哈希表读取不会超出内存1G的限制），读取文件也不会将文件一次性移入内存
// 然后通过哈希表统计每个文件Top10的数字（前一个统计完之后，立即将空间释放），最后汇总得到总的Top10的数字


// 哈希函数的设计：子哈希函数：f1(x)=>a  f2(x)=b
// 第一个哈希函数a + b 
//   二         a + 2b
//    n         a + nb